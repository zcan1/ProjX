diff --git a/.gitignore b/.gitignore
new file mode 100644
index 0000000..e082f7d
--- /dev/null
+++ b/.gitignore
@@ -0,0 +1,4 @@
+node_modules/
+.DS_Store
+.vscode/
+dist/
diff --git a/README.md b/README.md
new file mode 100644
index 0000000..63741e3
--- /dev/null
+++ b/README.md
@@ -0,0 +1,72 @@
+# Labyrinth Echo – Web Horror Prototype
+
+This repository contains a static Three.js experience set inside a claustrophobic
+hallway maze. A creature, supplied as an FBX model, stalks the corridors while
+you hunt for whispering shrines. Everything runs client-side, so the site can be
+hosted anywhere that can serve static files (including GitHub Pages).
+
+## Getting started
+
+1. **Install optional dev tooling** (only required for the helper HTTP server):
+
+   ```bash
+   npm install
+   ```
+
+2. **Provide the monster archive.** Place `Archive.zip` inside the `assets/`
+   directory. The archive should contain one FBX file for the monster and any
+   textures it depends on (PNG/JPG/TGA/BMP/WEBP). The runtime unpacks the ZIP in
+   the browser, resolves the textures, and feeds the FBX to Three.js' `FBXLoader`.
+   A minimal layout looks like this:
+
+   ```
+   assets/Archive.zip
+     ├── Monster.fbx
+     ├── BaseColor.png
+     └── Normal.tga
+   ```
+
+   > The filenames inside the archive should match whatever the FBX references.
+   > Keep them in the same relative folders you used when exporting.
+
+3. **Run the prototype.** Launch any static file server from the project root.
+   With the provided dependency you can run:
+
+   ```bash
+   npm run dev
+   ```
+
+   Then open <http://localhost:4173> in a modern browser and click the canvas to
+   enter pointer-lock mode.
+
+## Controls
+
+- `WASD` – Move forward/left/back/right
+- Mouse – Look around once the pointer is locked
+- `Shift` – Sprint (drains quickly in tight spaces)
+- `Space` – Quieten a whispering shrine when you are close enough
+
+## Implementation notes
+
+- The monster is streamed from `assets/Archive.zip`. The game decompresses the
+  archive on the fly using `fflate`, maps embedded textures to Blob URLs, and
+  hands the FBX data straight to `FBXLoader`.
+- Skeletal animation clips are auto-detected. The loader looks for idle, walk,
+  and attack clips (with sensible fallbacks) and blends them as the AI moves
+  between patrol and chase states.
+- The labyrinth is generated from a small grid layout that extrudes walls,
+  ceilings, collision volumes, and lighting fixtures to create a winding hallway
+  maze with flickering red spotlights.
+- Mist particles drift through the corridors to add depth. Point lights and the
+  monster audio emitter all respond dynamically when you silence shrines.
+- Everything is static HTML/CSS/JS, so deployment is as simple as copying the
+  project to any static host.
+
+## Troubleshooting
+
+- If you see “Place assets/Archive.zip…” in the HUD, ensure the ZIP exists and
+  that it contains exactly one FBX file plus the textures referenced by that FBX.
+- Texture paths are resolved case-insensitively. If a texture still fails to
+  load, inspect the FBX in a DCC tool to confirm the expected filenames.
+- Three.js modules are loaded from a CDN. For offline or air-gapped deployments,
+  download the modules locally and adjust the import URLs accordingly.
diff --git a/assets/README.md b/assets/README.md
new file mode 100644
index 0000000..211e8bb
--- /dev/null
+++ b/assets/README.md
@@ -0,0 +1,21 @@
+# Assets
+
+Drop `Archive.zip` here. The runtime expects the ZIP to include a single FBX file
+for the monster plus any textures it references. All paths are resolved relative
+to the root of the archive, so preserve the folder layout you used when exporting
+from your DCC tool.
+
+Example contents:
+
+```
+Archive.zip
+├── Monster.fbx
+├── textures/
+│   ├── Monster_BaseColor.png
+│   └── Monster_Normal.tga
+└── emissive.jpg
+```
+
+> The loader searches case-insensitively for texture filenames. If a map still
+> fails to appear, verify the expected names inside the FBX and rename the files
+> in the archive accordingly.
diff --git a/index.html b/index.html
new file mode 100644
index 0000000..ee483ba
--- /dev/null
+++ b/index.html
@@ -0,0 +1,23 @@
+<!DOCTYPE html>
+<html lang="en">
+  <head>
+    <meta charset="UTF-8" />
+    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
+    <title>Labyrinth Echo Prototype</title>
+    <link rel="stylesheet" href="styles.css" />
+  </head>
+  <body>
+    <canvas id="scene"></canvas>
+    <div id="overlay">
+      <h1>Labyrinth Echo</h1>
+      <p class="instructions">
+        Click to lock the pointer. Use <strong>WASD</strong> to move, <strong>mouse</strong> to look.
+        Press <strong>Shift</strong> to sprint and <strong>Space</strong> to hush the whispering shrines.
+      </p>
+      <div class="status">
+        <span id="interaction">Trace the whispers threading through the maze...</span>
+      </div>
+    </div>
+    <script type="module" src="./js/main.js"></script>
+  </body>
+</html>
diff --git a/joy v23.lib4d b/joy v23.lib4d
deleted file mode 100644
index 6b045e1..0000000
Binary files a/joy v23.lib4d and /dev/null differ
diff --git a/js/main.js b/js/main.js
new file mode 100644
index 0000000..c143be9
--- /dev/null
+++ b/js/main.js
@@ -0,0 +1,746 @@
+import * as THREE from 'https://unpkg.com/three@0.160.0/build/three.module.js';
+import { FBXLoader } from 'https://unpkg.com/three@0.160.0/examples/jsm/loaders/FBXLoader.js';
+import { PointerLockControls } from 'https://unpkg.com/three@0.160.0/examples/jsm/controls/PointerLockControls.js';
+import { SimplexNoise } from 'https://unpkg.com/three@0.160.0/examples/jsm/math/SimplexNoise.js';
+import { unzipSync } from 'https://cdn.jsdelivr.net/npm/fflate@0.8.2/esm/index.js';
+
+const MONSTER_ARCHIVE_URL = './assets/Archive.zip';
+const DESIRED_MONSTER_HEIGHT = 2.8;
+
+const canvas = document.getElementById('scene');
+const interactionText = document.getElementById('interaction');
+
+const renderer = new THREE.WebGLRenderer({ canvas, antialias: true });
+renderer.setPixelRatio(window.devicePixelRatio);
+renderer.setSize(window.innerWidth, window.innerHeight);
+renderer.shadowMap.enabled = true;
+renderer.shadowMap.type = THREE.PCFSoftShadowMap;
+renderer.outputColorSpace = THREE.SRGBColorSpace;
+
+const scene = new THREE.Scene();
+scene.background = new THREE.Color(0x010101);
+scene.fog = new THREE.FogExp2(0x040404, 0.08);
+
+const camera = new THREE.PerspectiveCamera(70, window.innerWidth / window.innerHeight, 0.1, 400);
+
+const controls = new PointerLockControls(camera, document.body);
+scene.add(controls.getObject());
+
+const listener = new THREE.AudioListener();
+camera.add(listener);
+const positionalAudio = new THREE.PositionalAudio(listener);
+
+const audioLoader = new THREE.AudioLoader();
+audioLoader.load(
+  'https://cdn.jsdelivr.net/gh/anars/blank-audio@master/15-seconds-of-silence.mp3',
+  (buffer) => {
+    positionalAudio.setBuffer(buffer);
+    positionalAudio.setRefDistance(6);
+    positionalAudio.setLoop(true);
+    positionalAudio.setPlaybackRate(0.75);
+    positionalAudio.setVolume(0.35);
+    positionalAudio.play();
+  },
+);
+
+const monsterAudioOffset = new THREE.Vector3(0, 1.5, 0);
+const laughterSource = new THREE.Object3D();
+laughterSource.add(positionalAudio);
+scene.add(laughterSource);
+
+const collisionBoxes = [];
+const mixers = [];
+
+const monsterState = {
+  object: null,
+  mixer: null,
+  actions: {},
+  currentAction: null,
+  patrolPoints: [],
+  targetIndex: 0,
+  mode: 'dormant',
+};
+
+const keyStates = {};
+const velocity = new THREE.Vector3();
+const direction = new THREE.Vector3();
+const previousPlayerPosition = new THREE.Vector3();
+const monsterDirection = new THREE.Vector3();
+let sprintTimer = 0;
+let ritualsCompleted = 0;
+
+const playerCollider = new THREE.Sphere(new THREE.Vector3(), 1.2);
+
+const environment = createEnvironment();
+monsterState.patrolPoints = environment.monsterPatrolPoints;
+controls.getObject().position.set(environment.playerStart.x, 1.7, environment.playerStart.z);
+playerCollider.center.copy(controls.getObject().position);
+
+laughterSource.position.copy(environment.monsterSpawn.clone().add(monsterAudioOffset));
+
+createLighting(environment.lightAnchors);
+const updateMist = createMistParticles(environment.bounds);
+const interactables = createInteractables(environment.altarSpots);
+const chaseThreshold = Math.max(1, Math.min(interactables.length, 2));
+
+loadMonsterFromArchive()
+  .then(({ object, mixer, actions }) => {
+    monsterState.object = object;
+    monsterState.mixer = mixer;
+    monsterState.actions = actions;
+    mixers.push(mixer);
+
+    object.position.copy(environment.monsterSpawn);
+    object.position.y = 0;
+    scene.add(object);
+
+    playMonsterAction('idle', 0.1);
+    setMonsterMode('patrol');
+
+    interactionText.textContent = 'Stay quiet. Footsteps echo somewhere ahead...';
+  })
+  .catch((error) => {
+    console.error('Failed to load monster', error);
+    interactionText.textContent = 'Place assets/Archive.zip with the FBX monster to awaken the maze.';
+  });
+
+const clock = new THREE.Clock();
+let flickerTimer = 0;
+
+document.addEventListener('click', () => controls.lock());
+
+document.addEventListener('keydown', (event) => {
+  keyStates[event.code] = true;
+  if (event.code === 'Space' && controls.isLocked) {
+    attemptInteraction(chaseThreshold);
+  }
+});
+
+document.addEventListener('keyup', (event) => {
+  keyStates[event.code] = false;
+});
+
+controls.addEventListener('lock', () => {
+  interactionText.textContent = 'The maze exhales as you step inside...';
+});
+
+controls.addEventListener('unlock', () => {
+  interactionText.textContent = 'Click to re-enter the labyrinth.';
+});
+
+window.addEventListener('resize', () => {
+  camera.aspect = window.innerWidth / window.innerHeight;
+  camera.updateProjectionMatrix();
+  renderer.setSize(window.innerWidth, window.innerHeight);
+});
+
+function animate() {
+  requestAnimationFrame(animate);
+
+  const delta = Math.min(clock.getDelta(), 0.05);
+  updatePlayer(delta);
+  updateMonster(delta);
+  updateFlicker(delta);
+
+  mixers.forEach((mixer) => mixer.update(delta));
+  if (updateMist) {
+    updateMist(delta);
+  }
+
+  renderer.render(scene, camera);
+}
+
+animate();
+
+function updatePlayer(delta) {
+  if (!controls.isLocked) return;
+
+  previousPlayerPosition.copy(controls.getObject().position);
+
+  const speed = keyStates['ShiftLeft'] || keyStates['ShiftRight'] ? 22 : 10.5;
+  if (keyStates['ShiftLeft'] || keyStates['ShiftRight']) {
+    sprintTimer = Math.min(sprintTimer + delta * 0.7, 1);
+  } else {
+    sprintTimer = Math.max(sprintTimer - delta * 0.8, 0);
+  }
+
+  velocity.x -= velocity.x * 8.0 * delta;
+  velocity.z -= velocity.z * 8.0 * delta;
+
+  direction.set(0, 0, 0);
+  if (keyStates['KeyW']) direction.z -= 1;
+  if (keyStates['KeyS']) direction.z += 1;
+  if (keyStates['KeyA']) direction.x -= 1;
+  if (keyStates['KeyD']) direction.x += 1;
+
+  if (direction.lengthSq() > 0) {
+    direction.normalize();
+  }
+
+  const currentSpeed = speed + sprintTimer * 12;
+  if (direction.z !== 0) velocity.z -= direction.z * currentSpeed * delta;
+  if (direction.x !== 0) velocity.x -= direction.x * currentSpeed * delta;
+
+  controls.moveRight(-velocity.x * delta);
+  controls.moveForward(-velocity.z * delta);
+
+  const position = controls.getObject().position;
+  if (isColliding(position)) {
+    position.copy(previousPlayerPosition);
+    velocity.set(0, velocity.y, 0);
+  }
+
+  position.y = THREE.MathUtils.clamp(position.y, 1.6, 1.82);
+  playerCollider.center.copy(position);
+  checkInteractions();
+}
+
+function isColliding(position) {
+  for (const box of collisionBoxes) {
+    if (box.containsPoint(position)) {
+      return true;
+    }
+  }
+  return false;
+}
+
+function updateFlicker(delta) {
+  flickerTimer += delta;
+  const intensity = 0.5 + Math.sin(flickerTimer * 6.8) * 0.3 + Math.random() * 0.12;
+  scene.traverse((object) => {
+    if (object.isLight && object.userData?.type === 'flicker') {
+      object.intensity = THREE.MathUtils.lerp(object.intensity, intensity, 0.3);
+    }
+  });
+}
+
+function createLighting(anchors) {
+  const ambient = new THREE.AmbientLight(0x110507, 0.55);
+  scene.add(ambient);
+
+  anchors.forEach((anchor) => {
+    const light = new THREE.SpotLight(0xff2b2b, 1.7, 22, Math.PI / 5, 0.6, 1.15);
+    light.position.set(anchor.x, anchor.y, anchor.z);
+    light.target.position.set(anchor.x, 0, anchor.z);
+    light.castShadow = true;
+    light.shadow.mapSize.set(1024, 1024);
+    light.shadow.bias = -0.0004;
+    light.userData.type = 'flicker';
+    scene.add(light);
+    scene.add(light.target);
+
+    const fixture = new THREE.Mesh(
+      new THREE.CylinderGeometry(0.18, 0.28, 0.6, 12),
+      new THREE.MeshStandardMaterial({
+        color: 0x240505,
+        emissive: new THREE.Color(0x360000),
+        emissiveIntensity: 0.6,
+        roughness: 0.45,
+      }),
+    );
+    fixture.position.set(anchor.x, anchor.y - 0.4, anchor.z);
+    fixture.rotation.x = Math.PI / 2;
+    scene.add(fixture);
+  });
+}
+
+function createEnvironment() {
+  const mazeLayout = [
+    '############',
+    '#S..+..#..M#',
+    '##.#.#.##.##',
+    '#.+..#.+..##',
+    '#.####.##.##',
+    '#.....+...##',
+    '############',
+  ];
+
+  const cellSize = 7;
+  const wallHeight = 5;
+  const cols = mazeLayout[0].length;
+  const rows = mazeLayout.length;
+  const originX = -((cols - 1) * cellSize) / 2;
+  const originZ = -((rows - 1) * cellSize) / 2;
+
+  const floorMaterial = new THREE.MeshStandardMaterial({
+    color: 0x190a0a,
+    roughness: 0.96,
+    metalness: 0.04,
+  });
+  const ceilingMaterial = new THREE.MeshStandardMaterial({
+    color: 0x050404,
+    roughness: 0.82,
+    metalness: 0.08,
+    side: THREE.BackSide,
+  });
+  const trimMaterial = new THREE.MeshStandardMaterial({
+    color: 0x250505,
+    roughness: 0.45,
+    metalness: 0.22,
+    emissive: new THREE.Color(0x250000),
+    emissiveIntensity: 0.28,
+  });
+  const wallMaterial = new THREE.MeshStandardMaterial({
+    color: 0x050101,
+    roughness: 0.84,
+    metalness: 0.12,
+  });
+
+  const floorGeometry = new THREE.PlaneGeometry(cellSize, cellSize);
+  floorGeometry.rotateX(-Math.PI / 2);
+
+  const ceilingGeometry = new THREE.PlaneGeometry(cellSize, cellSize);
+  ceilingGeometry.rotateX(Math.PI / 2);
+
+  const wallGeometry = new THREE.BoxGeometry(cellSize, wallHeight, cellSize);
+  const trimGeometry = new THREE.BoxGeometry(cellSize, 0.18, cellSize);
+
+  const noise = new SimplexNoise();
+  const lightAnchors = [];
+  const altarCandidates = [];
+  const monsterPatrolPoints = [];
+  let playerStart = new THREE.Vector3(0, 0, 0);
+  let monsterSpawn = new THREE.Vector3(0, 0, 0);
+
+  for (let row = 0; row < rows; row += 1) {
+    const line = mazeLayout[row];
+    for (let col = 0; col < cols; col += 1) {
+      const cell = line[col];
+      const worldX = originX + col * cellSize;
+      const worldZ = originZ + row * cellSize;
+
+      if (cell === '#') {
+        const wall = new THREE.Mesh(wallGeometry, wallMaterial);
+        wall.position.set(worldX, wallHeight / 2, worldZ);
+        wall.castShadow = true;
+        wall.receiveShadow = true;
+        scene.add(wall);
+
+        const box = new THREE.Box3().setFromCenterAndSize(
+          new THREE.Vector3(worldX, wallHeight / 2, worldZ),
+          new THREE.Vector3(cellSize * 0.92, wallHeight, cellSize * 0.92),
+        );
+        collisionBoxes.push(box);
+        continue;
+      }
+
+      const heightJitter = noise.noise(worldX * 0.12, worldZ * 0.12) * 0.22;
+      const floor = new THREE.Mesh(floorGeometry, floorMaterial);
+      floor.position.set(worldX, heightJitter - 0.04, worldZ);
+      floor.receiveShadow = true;
+      scene.add(floor);
+
+      const trim = new THREE.Mesh(trimGeometry, trimMaterial);
+      trim.position.set(worldX, heightJitter + 0.01, worldZ);
+      trim.receiveShadow = true;
+      scene.add(trim);
+
+      const ceiling = new THREE.Mesh(ceilingGeometry, ceilingMaterial);
+      ceiling.position.set(worldX, wallHeight - 0.1, worldZ);
+      scene.add(ceiling);
+
+      if (cell === 'S') {
+        playerStart = new THREE.Vector3(worldX, 0, worldZ);
+      }
+      if (cell === 'M') {
+        monsterSpawn = new THREE.Vector3(worldX, 0, worldZ);
+        lightAnchors.push(new THREE.Vector3(worldX, wallHeight - 0.4, worldZ));
+      }
+
+      if (cell === '+' || cell === 'M') {
+        monsterPatrolPoints.push(new THREE.Vector3(worldX, 0, worldZ));
+        lightAnchors.push(new THREE.Vector3(worldX, wallHeight - 0.4, worldZ));
+      } else if (cell === '.' && (row + col) % 3 === 0) {
+        altarCandidates.push(new THREE.Vector3(worldX, 0, worldZ));
+      }
+
+      if ((row + col) % 4 === 0) {
+        const column = new THREE.Mesh(
+          new THREE.CylinderGeometry(0.22, 0.35, wallHeight, 6),
+          trimMaterial,
+        );
+        column.position.set(worldX - cellSize / 2 + 0.4, wallHeight / 2, worldZ + cellSize / 2 - 0.4);
+        column.castShadow = true;
+        scene.add(column);
+      }
+    }
+  }
+
+  const anchorKeys = new Set();
+  const uniqueAnchors = [];
+  lightAnchors.forEach((anchor) => {
+    const key = `${anchor.x.toFixed(2)}|${anchor.z.toFixed(2)}`;
+    if (!anchorKeys.has(key)) {
+      anchorKeys.add(key);
+      uniqueAnchors.push(anchor);
+    }
+  });
+
+  const altarSpots = altarCandidates.slice(0, 4);
+
+  return {
+    playerStart,
+    monsterSpawn,
+    monsterPatrolPoints,
+    altarSpots,
+    lightAnchors: uniqueAnchors,
+    bounds: {
+      width: cols * cellSize,
+      depth: rows * cellSize,
+    },
+  };
+}
+
+function createMistParticles(bounds) {
+  const particleGeometry = new THREE.BufferGeometry();
+  const particleCount = 1100;
+  const positions = new Float32Array(particleCount * 3);
+  const speeds = new Float32Array(particleCount);
+
+  for (let i = 0; i < particleCount; i += 1) {
+    positions[i * 3] = (Math.random() - 0.5) * bounds.width * 0.9;
+    positions[i * 3 + 1] = 0.4 + Math.random() * 3.5;
+    positions[i * 3 + 2] = (Math.random() - 0.5) * bounds.depth * 0.9;
+    speeds[i] = 0.3 + Math.random() * 0.7;
+  }
+
+  particleGeometry.setAttribute('position', new THREE.BufferAttribute(positions, 3));
+  particleGeometry.setAttribute('speed', new THREE.BufferAttribute(speeds, 1));
+
+  const particleMaterial = new THREE.PointsMaterial({
+    color: 0xaa2020,
+    size: 0.7,
+    transparent: true,
+    opacity: 0.22,
+    depthWrite: false,
+  });
+
+  const mist = new THREE.Points(particleGeometry, particleMaterial);
+  mist.name = 'mist';
+  scene.add(mist);
+
+  return (delta) => {
+    const posAttr = mist.geometry.getAttribute('position');
+    const speedAttr = mist.geometry.getAttribute('speed');
+    const time = performance.now() * 0.001;
+
+    for (let i = 0; i < posAttr.count; i += 1) {
+      const speed = speedAttr.getX(i);
+      let x = posAttr.getX(i);
+      let y = posAttr.getY(i);
+      let z = posAttr.getZ(i);
+
+      x += Math.sin(time * 0.4 + z * 0.08) * delta * 0.9;
+      y += Math.cos(time + x * 0.25) * delta * 0.5;
+      z += speed * delta * 1.5;
+
+      if (z > bounds.depth / 2) {
+        z = -bounds.depth / 2;
+      }
+      if (x > bounds.width / 2) {
+        x = -bounds.width / 2;
+      } else if (x < -bounds.width / 2) {
+        x = bounds.width / 2;
+      }
+
+      posAttr.setXYZ(i, x, THREE.MathUtils.clamp(y, 0.4, 4.6), z);
+    }
+
+    posAttr.needsUpdate = true;
+  };
+}
+
+async function loadMonsterFromArchive() {
+  const response = await fetch(MONSTER_ARCHIVE_URL);
+  if (!response.ok) {
+    throw new Error(`Failed to fetch monster archive (${response.status})`);
+  }
+
+  const archiveBuffer = await response.arrayBuffer();
+  const archive = unzipSync(new Uint8Array(archiveBuffer));
+
+  let fbxBytes = null;
+  const textureURLs = new Map();
+  const temporaryURLs = [];
+
+  for (const [name, data] of Object.entries(archive)) {
+    const normalized = normalizePath(name);
+    const extension = normalized.split('.').pop();
+    if (!extension) continue;
+
+    if (extension === 'fbx' && !fbxBytes) {
+      fbxBytes = data;
+      continue;
+    }
+
+    if (['png', 'jpg', 'jpeg', 'tga', 'bmp', 'webp'].includes(extension)) {
+      const mimeType =
+        extension === 'png'
+          ? 'image/png'
+          : extension === 'webp'
+          ? 'image/webp'
+          : extension === 'bmp'
+          ? 'image/bmp'
+          : 'image/jpeg';
+      const blob = new Blob([data], { type: mimeType });
+      const url = URL.createObjectURL(blob);
+      textureURLs.set(normalized, url);
+      temporaryURLs.push(url);
+    }
+  }
+
+  if (!fbxBytes) {
+    throw new Error('Archive.zip did not contain an FBX model.');
+  }
+
+  const manager = new THREE.LoadingManager();
+  manager.setURLModifier((url) => {
+    const normalized = normalizePath(url);
+    if (textureURLs.has(normalized)) {
+      return textureURLs.get(normalized);
+    }
+    const basename = normalized.split('/').pop();
+    if (basename) {
+      for (const [key, value] of textureURLs.entries()) {
+        if (key.endsWith(basename)) {
+          return value;
+        }
+      }
+    }
+    return url;
+  });
+
+  const cleanup = () => {
+    while (temporaryURLs.length > 0) {
+      const url = temporaryURLs.pop();
+      URL.revokeObjectURL(url);
+    }
+  };
+
+  manager.onError = cleanup;
+  manager.onAbort = cleanup;
+
+  const loader = new FBXLoader(manager);
+  const arrayBuffer = fbxBytes.buffer.slice(fbxBytes.byteOffset, fbxBytes.byteOffset + fbxBytes.byteLength);
+
+  const object = loader.parse(arrayBuffer, './');
+  const container = new THREE.Group();
+  container.name = 'Monster';
+  container.add(object);
+
+  container.traverse((child) => {
+    if (child.isMesh) {
+      child.castShadow = true;
+      child.receiveShadow = true;
+      if (child.material?.map) {
+        child.material.map.anisotropy = 8;
+      }
+    }
+  });
+
+  const bounds = new THREE.Box3().setFromObject(container);
+  const size = new THREE.Vector3();
+  bounds.getSize(size);
+  if (size.y > 0) {
+    const scale = DESIRED_MONSTER_HEIGHT / size.y;
+    container.scale.setScalar(scale);
+  }
+  bounds.setFromObject(container);
+  container.position.y -= bounds.min.y;
+
+  const mixer = new THREE.AnimationMixer(container);
+  const clips = object.animations && object.animations.length > 0 ? object.animations : loader.animations || [];
+
+  const findClip = (keywords) =>
+    clips.find((clip) => keywords.some((keyword) => clip.name.toLowerCase().includes(keyword))) || null;
+
+  const idleClip = findClip(['idle', 'breath', 'stand']) || clips[0] || null;
+  const walkClip = findClip(['walk', 'prowl', 'pace']) || idleClip;
+  const attackClip = findClip(['attack', 'scream', 'lunge', 'hit']) || walkClip;
+
+  const actions = {
+    idle: idleClip ? mixer.clipAction(idleClip) : null,
+    walk: walkClip ? mixer.clipAction(walkClip) : null,
+    attack: attackClip ? mixer.clipAction(attackClip) : null,
+  };
+
+  if (!actions.walk && actions.idle) {
+    actions.walk = actions.idle;
+  }
+  if (!actions.attack && (actions.walk || actions.idle)) {
+    actions.attack = actions.walk || actions.idle;
+  }
+
+  manager.onLoad = cleanup;
+
+  return { object: container, mixer, actions };
+}
+
+function normalizePath(path) {
+  return path.replace(/\\/g, '/').replace(/^\.\//, '').toLowerCase();
+}
+
+function playMonsterAction(name, fade = 0.45) {
+  const action = monsterState.actions[name];
+  if (!action || monsterState.currentAction === action) {
+    return;
+  }
+
+  action.reset().fadeIn(fade).play();
+  if (monsterState.currentAction) {
+    monsterState.currentAction.fadeOut(fade * 0.8);
+  }
+  monsterState.currentAction = action;
+}
+
+function setMonsterMode(mode) {
+  if (monsterState.mode === mode) return;
+  monsterState.mode = mode;
+
+  if (mode === 'patrol') {
+    playMonsterAction('walk', 0.6);
+  } else if (mode === 'chase') {
+    playMonsterAction('attack', 0.2);
+  } else {
+    playMonsterAction('idle', 0.6);
+  }
+}
+
+function updateMonster(delta) {
+  if (!monsterState.object) return;
+
+  let targetPosition = null;
+  if (monsterState.mode === 'chase') {
+    targetPosition = controls.getObject().position;
+  } else if (monsterState.patrolPoints.length > 0) {
+    targetPosition = monsterState.patrolPoints[monsterState.targetIndex];
+  }
+
+  const monsterPosition = monsterState.object.position;
+  if (targetPosition) {
+    monsterDirection.copy(targetPosition).sub(monsterPosition);
+    const distance = monsterDirection.length();
+
+    if (distance > 0.05) {
+      monsterDirection.normalize();
+      const speed = monsterState.mode === 'chase' ? 3.6 : 1.6;
+      monsterPosition.addScaledVector(monsterDirection, speed * delta);
+      monsterState.object.position.y = 0;
+      monsterState.object.rotation.y = Math.atan2(monsterDirection.x, monsterDirection.z);
+
+      if (monsterState.mode === 'patrol' && distance < 0.6) {
+        monsterState.targetIndex = (monsterState.targetIndex + 1) % monsterState.patrolPoints.length;
+      }
+    }
+  }
+
+  laughterSource.position.copy(monsterPosition).add(monsterAudioOffset);
+
+  const playerDistance = monsterPosition.distanceTo(controls.getObject().position);
+  if (monsterState.mode === 'chase') {
+    if (playerDistance < 1.5) {
+      interactionText.textContent = 'It caught you. The maze inhales.';
+      interactionText.classList.add('active');
+    } else {
+      interactionText.textContent = 'Run. The footsteps are right behind you!';
+      interactionText.classList.add('active');
+    }
+  } else if (playerDistance < 7) {
+    interactionText.textContent = 'Stay quiet. Something is pacing nearby.';
+    interactionText.classList.add('active');
+  }
+}
+
+function createInteractables(spots) {
+  const interactableObjects = [];
+  if (!spots || spots.length === 0) {
+    return interactableObjects;
+  }
+
+  const geometry = new THREE.BoxGeometry(1.6, 0.4, 1.6);
+  const material = new THREE.MeshStandardMaterial({
+    color: 0x1f0707,
+    roughness: 0.8,
+    metalness: 0.1,
+  });
+
+  spots.forEach((spot, index) => {
+    const altar = new THREE.Mesh(geometry, material);
+    altar.position.set(spot.x, 0.2, spot.z);
+    altar.castShadow = true;
+    altar.receiveShadow = true;
+    altar.userData = {
+      interacted: false,
+      message: index === 0 ? 'Press SPACE to steady the whispers' : 'Press SPACE to hush the next whisper',
+    };
+
+    const candle = new THREE.PointLight(0xff5a2a, 0.9, 10, 2.2);
+    candle.position.set(spot.x, 1.3, spot.z);
+    candle.userData.type = 'flicker';
+    candle.castShadow = true;
+
+    scene.add(altar);
+    scene.add(candle);
+
+    interactableObjects.push(altar);
+  });
+
+  return interactableObjects;
+}
+
+function checkInteractions() {
+  let nearest = null;
+  let minDistance = Infinity;
+
+  for (const object of interactables) {
+    const distance = object.position.distanceTo(playerCollider.center);
+    if (distance < 3 && distance < minDistance) {
+      nearest = object;
+      minDistance = distance;
+    }
+  }
+
+  if (nearest) {
+    if (!nearest.userData.interacted) {
+      interactionText.textContent = nearest.userData.message;
+    } else if (monsterState.mode !== 'chase') {
+      interactionText.textContent = 'The air is listening for you...';
+    }
+    interactionText.classList.add('active');
+  } else if (monsterState.mode !== 'chase') {
+    interactionText.textContent = 'Trace the whispers threading through the maze...';
+    interactionText.classList.remove('active');
+  }
+}
+
+function attemptInteraction(threshold) {
+  let nearest = null;
+  let minDistance = Infinity;
+
+  for (const object of interactables) {
+    const distance = object.position.distanceTo(playerCollider.center);
+    if (distance < 3 && distance < minDistance) {
+      nearest = object;
+      minDistance = distance;
+    }
+  }
+
+  if (nearest && !nearest.userData.interacted) {
+    nearest.userData.interacted = true;
+    ritualsCompleted += 1;
+    interactionText.textContent = 'The whisper cuts out. Something else stirs.';
+    interactionText.classList.add('active');
+
+    scene.traverse((object) => {
+      if (object.isLight && object.userData?.type === 'flicker') {
+        object.intensity += 0.4;
+      }
+    });
+
+    if (ritualsCompleted >= threshold) {
+      setMonsterMode('chase');
+      interactionText.textContent = 'Run. The creature is hunting you now!';
+      interactionText.classList.add('active');
+    }
+  }
+}
diff --git a/package-lock.json b/package-lock.json
new file mode 100644
index 0000000..a166a1d
--- /dev/null
+++ b/package-lock.json
@@ -0,0 +1,642 @@
+{
+  "name": "projx-horror-web",
+  "version": "0.1.0",
+  "lockfileVersion": 3,
+  "requires": true,
+  "packages": {
+    "": {
+      "name": "projx-horror-web",
+      "version": "0.1.0",
+      "devDependencies": {
+        "http-server": "^14.1.1"
+      }
+    },
+    "node_modules/ansi-styles": {
+      "version": "4.3.0",
+      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.3.0.tgz",
+      "integrity": "sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "color-convert": "^2.0.1"
+      },
+      "engines": {
+        "node": ">=8"
+      },
+      "funding": {
+        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
+      }
+    },
+    "node_modules/async": {
+      "version": "3.2.6",
+      "resolved": "https://registry.npmjs.org/async/-/async-3.2.6.tgz",
+      "integrity": "sha512-htCUDlxyyCLMgaM3xXg0C0LW2xqfuQ6p05pCEIsXuyQ+a1koYKTuBMzRNwmybfLgvJDMd0r1LTn4+E0Ti6C2AA==",
+      "dev": true,
+      "license": "MIT"
+    },
+    "node_modules/basic-auth": {
+      "version": "2.0.1",
+      "resolved": "https://registry.npmjs.org/basic-auth/-/basic-auth-2.0.1.tgz",
+      "integrity": "sha512-NF+epuEdnUYVlGuhaxbbq+dvJttwLnGY+YixlXlME5KpQ5W3CnXA5cVTneY3SPbPDRkcjMbifrwmFYcClgOZeg==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "safe-buffer": "5.1.2"
+      },
+      "engines": {
+        "node": ">= 0.8"
+      }
+    },
+    "node_modules/call-bind-apply-helpers": {
+      "version": "1.0.2",
+      "resolved": "https://registry.npmjs.org/call-bind-apply-helpers/-/call-bind-apply-helpers-1.0.2.tgz",
+      "integrity": "sha512-Sp1ablJ0ivDkSzjcaJdxEunN5/XvksFJ2sMBFfq6x0ryhQV/2b/KwFe21cMpmHtPOSij8K99/wSfoEuTObmuMQ==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "es-errors": "^1.3.0",
+        "function-bind": "^1.1.2"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      }
+    },
+    "node_modules/call-bound": {
+      "version": "1.0.4",
+      "resolved": "https://registry.npmjs.org/call-bound/-/call-bound-1.0.4.tgz",
+      "integrity": "sha512-+ys997U96po4Kx/ABpBCqhA9EuxJaQWDQg7295H4hBphv3IZg0boBKuwYpt4YXp6MZ5AmZQnU/tyMTlRpaSejg==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "call-bind-apply-helpers": "^1.0.2",
+        "get-intrinsic": "^1.3.0"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/chalk": {
+      "version": "4.1.2",
+      "resolved": "https://registry.npmjs.org/chalk/-/chalk-4.1.2.tgz",
+      "integrity": "sha512-oKnbhFyRIXpUuez8iBMmyEa4nbj4IOQyuhc/wy9kY7/WVPcwIO9VA668Pu8RkO7+0G76SLROeyw9CpQ061i4mA==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "ansi-styles": "^4.1.0",
+        "supports-color": "^7.1.0"
+      },
+      "engines": {
+        "node": ">=10"
+      },
+      "funding": {
+        "url": "https://github.com/chalk/chalk?sponsor=1"
+      }
+    },
+    "node_modules/color-convert": {
+      "version": "2.0.1",
+      "resolved": "https://registry.npmjs.org/color-convert/-/color-convert-2.0.1.tgz",
+      "integrity": "sha512-RRECPsj7iu/xb5oKYcsFHSppFNnsj/52OVTRKb4zP5onXwVF3zVmmToNcOfGC+CRDpfK/U584fMg38ZHCaElKQ==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "color-name": "~1.1.4"
+      },
+      "engines": {
+        "node": ">=7.0.0"
+      }
+    },
+    "node_modules/color-name": {
+      "version": "1.1.4",
+      "resolved": "https://registry.npmjs.org/color-name/-/color-name-1.1.4.tgz",
+      "integrity": "sha512-dOy+3AuW3a2wNbZHIuMZpTcgjGuLU/uBL/ubcZF9OXbDo8ff4O8yVp5Bf0efS8uEoYo5q4Fx7dY9OgQGXgAsQA==",
+      "dev": true,
+      "license": "MIT"
+    },
+    "node_modules/corser": {
+      "version": "2.0.1",
+      "resolved": "https://registry.npmjs.org/corser/-/corser-2.0.1.tgz",
+      "integrity": "sha512-utCYNzRSQIZNPIcGZdQc92UVJYAhtGAteCFg0yRaFm8f0P+CPtyGyHXJcGXnffjCybUCEx3FQ2G7U3/o9eIkVQ==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">= 0.4.0"
+      }
+    },
+    "node_modules/debug": {
+      "version": "4.4.3",
+      "resolved": "https://registry.npmjs.org/debug/-/debug-4.4.3.tgz",
+      "integrity": "sha512-RGwwWnwQvkVfavKVt22FGLw+xYSdzARwm0ru6DhTVA3umU5hZc28V3kO4stgYryrTlLpuvgI9GiijltAjNbcqA==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "ms": "^2.1.3"
+      },
+      "engines": {
+        "node": ">=6.0"
+      },
+      "peerDependenciesMeta": {
+        "supports-color": {
+          "optional": true
+        }
+      }
+    },
+    "node_modules/dunder-proto": {
+      "version": "1.0.1",
+      "resolved": "https://registry.npmjs.org/dunder-proto/-/dunder-proto-1.0.1.tgz",
+      "integrity": "sha512-KIN/nDJBQRcXw0MLVhZE9iQHmG68qAVIBg9CqmUYjmQIhgij9U5MFvrqkUL5FbtyyzZuOeOt0zdeRe4UY7ct+A==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "call-bind-apply-helpers": "^1.0.1",
+        "es-errors": "^1.3.0",
+        "gopd": "^1.2.0"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      }
+    },
+    "node_modules/es-define-property": {
+      "version": "1.0.1",
+      "resolved": "https://registry.npmjs.org/es-define-property/-/es-define-property-1.0.1.tgz",
+      "integrity": "sha512-e3nRfgfUZ4rNGL232gUgX06QNyyez04KdjFrF+LTRoOXmrOgFKDg4BCdsjW8EnT69eqdYGmRpJwiPVYNrCaW3g==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">= 0.4"
+      }
+    },
+    "node_modules/es-errors": {
+      "version": "1.3.0",
+      "resolved": "https://registry.npmjs.org/es-errors/-/es-errors-1.3.0.tgz",
+      "integrity": "sha512-Zf5H2Kxt2xjTvbJvP2ZWLEICxA6j+hAmMzIlypy4xcBg1vKVnx89Wy0GbS+kf5cwCVFFzdCFh2XSCFNULS6csw==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">= 0.4"
+      }
+    },
+    "node_modules/es-object-atoms": {
+      "version": "1.1.1",
+      "resolved": "https://registry.npmjs.org/es-object-atoms/-/es-object-atoms-1.1.1.tgz",
+      "integrity": "sha512-FGgH2h8zKNim9ljj7dankFPcICIK9Cp5bm+c2gQSYePhpaG5+esrLODihIorn+Pe6FGJzWhXQotPv73jTaldXA==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "es-errors": "^1.3.0"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      }
+    },
+    "node_modules/eventemitter3": {
+      "version": "4.0.7",
+      "resolved": "https://registry.npmjs.org/eventemitter3/-/eventemitter3-4.0.7.tgz",
+      "integrity": "sha512-8guHBZCwKnFhYdHr2ysuRWErTwhoN2X8XELRlrRwpmfeY2jjuUN4taQMsULKUVo1K4DvZl+0pgfyoysHxvmvEw==",
+      "dev": true,
+      "license": "MIT"
+    },
+    "node_modules/follow-redirects": {
+      "version": "1.15.11",
+      "resolved": "https://registry.npmjs.org/follow-redirects/-/follow-redirects-1.15.11.tgz",
+      "integrity": "sha512-deG2P0JfjrTxl50XGCDyfI97ZGVCxIpfKYmfyrQ54n5FO/0gfIES8C/Psl6kWVDolizcaaxZJnTS0QSMxvnsBQ==",
+      "dev": true,
+      "funding": [
+        {
+          "type": "individual",
+          "url": "https://github.com/sponsors/RubenVerborgh"
+        }
+      ],
+      "license": "MIT",
+      "engines": {
+        "node": ">=4.0"
+      },
+      "peerDependenciesMeta": {
+        "debug": {
+          "optional": true
+        }
+      }
+    },
+    "node_modules/function-bind": {
+      "version": "1.1.2",
+      "resolved": "https://registry.npmjs.org/function-bind/-/function-bind-1.1.2.tgz",
+      "integrity": "sha512-7XHNxH7qX9xG5mIwxkhumTox/MIRNcOgDrxWsMt2pAr23WHp6MrRlN7FBSFpCpr+oVO0F744iUgR82nJMfG2SA==",
+      "dev": true,
+      "license": "MIT",
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/get-intrinsic": {
+      "version": "1.3.0",
+      "resolved": "https://registry.npmjs.org/get-intrinsic/-/get-intrinsic-1.3.0.tgz",
+      "integrity": "sha512-9fSjSaos/fRIVIp+xSJlE6lfwhES7LNtKaCBIamHsjr2na1BiABJPo0mOjjz8GJDURarmCPGqaiVg5mfjb98CQ==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "call-bind-apply-helpers": "^1.0.2",
+        "es-define-property": "^1.0.1",
+        "es-errors": "^1.3.0",
+        "es-object-atoms": "^1.1.1",
+        "function-bind": "^1.1.2",
+        "get-proto": "^1.0.1",
+        "gopd": "^1.2.0",
+        "has-symbols": "^1.1.0",
+        "hasown": "^2.0.2",
+        "math-intrinsics": "^1.1.0"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/get-proto": {
+      "version": "1.0.1",
+      "resolved": "https://registry.npmjs.org/get-proto/-/get-proto-1.0.1.tgz",
+      "integrity": "sha512-sTSfBjoXBp89JvIKIefqw7U2CCebsc74kiY6awiGogKtoSGbgjYE/G/+l9sF3MWFPNc9IcoOC4ODfKHfxFmp0g==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "dunder-proto": "^1.0.1",
+        "es-object-atoms": "^1.0.0"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      }
+    },
+    "node_modules/gopd": {
+      "version": "1.2.0",
+      "resolved": "https://registry.npmjs.org/gopd/-/gopd-1.2.0.tgz",
+      "integrity": "sha512-ZUKRh6/kUFoAiTAtTYPZJ3hw9wNxx+BIBOijnlG9PnrJsCcSjs1wyyD6vJpaYtgnzDrKYRSqf3OO6Rfa93xsRg==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">= 0.4"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/has-flag": {
+      "version": "4.0.0",
+      "resolved": "https://registry.npmjs.org/has-flag/-/has-flag-4.0.0.tgz",
+      "integrity": "sha512-EykJT/Q1KjTWctppgIAgfSO0tKVuZUjhgMr17kqTumMl6Afv3EISleU7qZUzoXDFTAHTDC4NOoG/ZxU3EvlMPQ==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/has-symbols": {
+      "version": "1.1.0",
+      "resolved": "https://registry.npmjs.org/has-symbols/-/has-symbols-1.1.0.tgz",
+      "integrity": "sha512-1cDNdwJ2Jaohmb3sg4OmKaMBwuC48sYni5HUw2DvsC8LjGTLK9h+eb1X6RyuOHe4hT0ULCW68iomhjUoKUqlPQ==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">= 0.4"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/hasown": {
+      "version": "2.0.2",
+      "resolved": "https://registry.npmjs.org/hasown/-/hasown-2.0.2.tgz",
+      "integrity": "sha512-0hJU9SCPvmMzIBdZFqNPXWa6dqh7WdH0cII9y+CyS8rG3nL48Bclra9HmKhVVUHyPWNH5Y7xDwAB7bfgSjkUMQ==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "function-bind": "^1.1.2"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      }
+    },
+    "node_modules/he": {
+      "version": "1.2.0",
+      "resolved": "https://registry.npmjs.org/he/-/he-1.2.0.tgz",
+      "integrity": "sha512-F/1DnUGPopORZi0ni+CvrCgHQ5FyEAHRLSApuYWMmrbSwoN2Mn/7k+Gl38gJnR7yyDZk6WLXwiGod1JOWNDKGw==",
+      "dev": true,
+      "license": "MIT",
+      "bin": {
+        "he": "bin/he"
+      }
+    },
+    "node_modules/html-encoding-sniffer": {
+      "version": "3.0.0",
+      "resolved": "https://registry.npmjs.org/html-encoding-sniffer/-/html-encoding-sniffer-3.0.0.tgz",
+      "integrity": "sha512-oWv4T4yJ52iKrufjnyZPkrN0CH3QnrUqdB6In1g5Fe1mia8GmF36gnfNySxoZtxD5+NmYw1EElVXiBk93UeskA==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "whatwg-encoding": "^2.0.0"
+      },
+      "engines": {
+        "node": ">=12"
+      }
+    },
+    "node_modules/http-proxy": {
+      "version": "1.18.1",
+      "resolved": "https://registry.npmjs.org/http-proxy/-/http-proxy-1.18.1.tgz",
+      "integrity": "sha512-7mz/721AbnJwIVbnaSv1Cz3Am0ZLT/UBwkC92VlxhXv/k/BBQfM2fXElQNC27BVGr0uwUpplYPQM9LnaBMR5NQ==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "eventemitter3": "^4.0.0",
+        "follow-redirects": "^1.0.0",
+        "requires-port": "^1.0.0"
+      },
+      "engines": {
+        "node": ">=8.0.0"
+      }
+    },
+    "node_modules/http-server": {
+      "version": "14.1.1",
+      "resolved": "https://registry.npmjs.org/http-server/-/http-server-14.1.1.tgz",
+      "integrity": "sha512-+cbxadF40UXd9T01zUHgA+rlo2Bg1Srer4+B4NwIHdaGxAGGv59nYRnGGDJ9LBk7alpS0US+J+bLLdQOOkJq4A==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "basic-auth": "^2.0.1",
+        "chalk": "^4.1.2",
+        "corser": "^2.0.1",
+        "he": "^1.2.0",
+        "html-encoding-sniffer": "^3.0.0",
+        "http-proxy": "^1.18.1",
+        "mime": "^1.6.0",
+        "minimist": "^1.2.6",
+        "opener": "^1.5.1",
+        "portfinder": "^1.0.28",
+        "secure-compare": "3.0.1",
+        "union": "~0.5.0",
+        "url-join": "^4.0.1"
+      },
+      "bin": {
+        "http-server": "bin/http-server"
+      },
+      "engines": {
+        "node": ">=12"
+      }
+    },
+    "node_modules/iconv-lite": {
+      "version": "0.6.3",
+      "resolved": "https://registry.npmjs.org/iconv-lite/-/iconv-lite-0.6.3.tgz",
+      "integrity": "sha512-4fCk79wshMdzMp2rH06qWrJE4iolqLhCUH+OiuIgU++RB0+94NlDL81atO7GX55uUKueo0txHNtvEyI6D7WdMw==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "safer-buffer": ">= 2.1.2 < 3.0.0"
+      },
+      "engines": {
+        "node": ">=0.10.0"
+      }
+    },
+    "node_modules/math-intrinsics": {
+      "version": "1.1.0",
+      "resolved": "https://registry.npmjs.org/math-intrinsics/-/math-intrinsics-1.1.0.tgz",
+      "integrity": "sha512-/IXtbwEk5HTPyEwyKX6hGkYXxM9nbj64B+ilVJnC/R6B0pH5G4V3b0pVbL7DBj4tkhBAppbQUlf6F6Xl9LHu1g==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">= 0.4"
+      }
+    },
+    "node_modules/mime": {
+      "version": "1.6.0",
+      "resolved": "https://registry.npmjs.org/mime/-/mime-1.6.0.tgz",
+      "integrity": "sha512-x0Vn8spI+wuJ1O6S7gnbaQg8Pxh4NNHb7KSINmEWKiPE4RKOplvijn+NkmYmmRgP68mc70j2EbeTFRsrswaQeg==",
+      "dev": true,
+      "license": "MIT",
+      "bin": {
+        "mime": "cli.js"
+      },
+      "engines": {
+        "node": ">=4"
+      }
+    },
+    "node_modules/minimist": {
+      "version": "1.2.8",
+      "resolved": "https://registry.npmjs.org/minimist/-/minimist-1.2.8.tgz",
+      "integrity": "sha512-2yyAR8qBkN3YuheJanUpWC5U3bb5osDywNB8RzDVlDwDHbocAJveqqj1u8+SVD7jkWT4yvsHCpWqqWqAxb0zCA==",
+      "dev": true,
+      "license": "MIT",
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/ms": {
+      "version": "2.1.3",
+      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
+      "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA==",
+      "dev": true,
+      "license": "MIT"
+    },
+    "node_modules/object-inspect": {
+      "version": "1.13.4",
+      "resolved": "https://registry.npmjs.org/object-inspect/-/object-inspect-1.13.4.tgz",
+      "integrity": "sha512-W67iLl4J2EXEGTbfeHCffrjDfitvLANg0UlX3wFUUSTx92KXRFegMHUVgSqE+wvhAbi4WqjGg9czysTV2Epbew==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">= 0.4"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/opener": {
+      "version": "1.5.2",
+      "resolved": "https://registry.npmjs.org/opener/-/opener-1.5.2.tgz",
+      "integrity": "sha512-ur5UIdyw5Y7yEj9wLzhqXiy6GZ3Mwx0yGI+5sMn2r0N0v3cKJvUmFH5yPP+WXh9e0xfyzyJX95D8l088DNFj7A==",
+      "dev": true,
+      "license": "(WTFPL OR MIT)",
+      "bin": {
+        "opener": "bin/opener-bin.js"
+      }
+    },
+    "node_modules/portfinder": {
+      "version": "1.0.38",
+      "resolved": "https://registry.npmjs.org/portfinder/-/portfinder-1.0.38.tgz",
+      "integrity": "sha512-rEwq/ZHlJIKw++XtLAO8PPuOQA/zaPJOZJ37BVuN97nLpMJeuDVLVGRwbFoBgLudgdTMP2hdRJP++H+8QOA3vg==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "async": "^3.2.6",
+        "debug": "^4.3.6"
+      },
+      "engines": {
+        "node": ">= 10.12"
+      }
+    },
+    "node_modules/qs": {
+      "version": "6.14.0",
+      "resolved": "https://registry.npmjs.org/qs/-/qs-6.14.0.tgz",
+      "integrity": "sha512-YWWTjgABSKcvs/nWBi9PycY/JiPJqOD4JA6o9Sej2AtvSGarXxKC3OQSk4pAarbdQlKAh5D4FCQkJNkW+GAn3w==",
+      "dev": true,
+      "license": "BSD-3-Clause",
+      "dependencies": {
+        "side-channel": "^1.1.0"
+      },
+      "engines": {
+        "node": ">=0.6"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/requires-port": {
+      "version": "1.0.0",
+      "resolved": "https://registry.npmjs.org/requires-port/-/requires-port-1.0.0.tgz",
+      "integrity": "sha512-KigOCHcocU3XODJxsu8i/j8T9tzT4adHiecwORRQ0ZZFcp7ahwXuRU1m+yuO90C5ZUyGeGfocHDI14M3L3yDAQ==",
+      "dev": true,
+      "license": "MIT"
+    },
+    "node_modules/safe-buffer": {
+      "version": "5.1.2",
+      "resolved": "https://registry.npmjs.org/safe-buffer/-/safe-buffer-5.1.2.tgz",
+      "integrity": "sha512-Gd2UZBJDkXlY7GbJxfsE8/nvKkUEU1G38c1siN6QP6a9PT9MmHB8GnpscSmMJSoF8LOIrt8ud/wPtojys4G6+g==",
+      "dev": true,
+      "license": "MIT"
+    },
+    "node_modules/safer-buffer": {
+      "version": "2.1.2",
+      "resolved": "https://registry.npmjs.org/safer-buffer/-/safer-buffer-2.1.2.tgz",
+      "integrity": "sha512-YZo3K82SD7Riyi0E1EQPojLz7kpepnSQI9IyPbHHg1XXXevb5dJI7tpyN2ADxGcQbHG7vcyRHk0cbwqcQriUtg==",
+      "dev": true,
+      "license": "MIT"
+    },
+    "node_modules/secure-compare": {
+      "version": "3.0.1",
+      "resolved": "https://registry.npmjs.org/secure-compare/-/secure-compare-3.0.1.tgz",
+      "integrity": "sha512-AckIIV90rPDcBcglUwXPF3kg0P0qmPsPXAj6BBEENQE1p5yA1xfmDJzfi1Tappj37Pv2mVbKpL3Z1T+Nn7k1Qw==",
+      "dev": true,
+      "license": "MIT"
+    },
+    "node_modules/side-channel": {
+      "version": "1.1.0",
+      "resolved": "https://registry.npmjs.org/side-channel/-/side-channel-1.1.0.tgz",
+      "integrity": "sha512-ZX99e6tRweoUXqR+VBrslhda51Nh5MTQwou5tnUDgbtyM0dBgmhEDtWGP/xbKn6hqfPRHujUNwz5fy/wbbhnpw==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "es-errors": "^1.3.0",
+        "object-inspect": "^1.13.3",
+        "side-channel-list": "^1.0.0",
+        "side-channel-map": "^1.0.1",
+        "side-channel-weakmap": "^1.0.2"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/side-channel-list": {
+      "version": "1.0.0",
+      "resolved": "https://registry.npmjs.org/side-channel-list/-/side-channel-list-1.0.0.tgz",
+      "integrity": "sha512-FCLHtRD/gnpCiCHEiJLOwdmFP+wzCmDEkc9y7NsYxeF4u7Btsn1ZuwgwJGxImImHicJArLP4R0yX4c2KCrMrTA==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "es-errors": "^1.3.0",
+        "object-inspect": "^1.13.3"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/side-channel-map": {
+      "version": "1.0.1",
+      "resolved": "https://registry.npmjs.org/side-channel-map/-/side-channel-map-1.0.1.tgz",
+      "integrity": "sha512-VCjCNfgMsby3tTdo02nbjtM/ewra6jPHmpThenkTYh8pG9ucZ/1P8So4u4FGBek/BjpOVsDCMoLA/iuBKIFXRA==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "call-bound": "^1.0.2",
+        "es-errors": "^1.3.0",
+        "get-intrinsic": "^1.2.5",
+        "object-inspect": "^1.13.3"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/side-channel-weakmap": {
+      "version": "1.0.2",
+      "resolved": "https://registry.npmjs.org/side-channel-weakmap/-/side-channel-weakmap-1.0.2.tgz",
+      "integrity": "sha512-WPS/HvHQTYnHisLo9McqBHOJk2FkHO/tlpvldyrnem4aeQp4hai3gythswg6p01oSoTl58rcpiFAjF2br2Ak2A==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "call-bound": "^1.0.2",
+        "es-errors": "^1.3.0",
+        "get-intrinsic": "^1.2.5",
+        "object-inspect": "^1.13.3",
+        "side-channel-map": "^1.0.1"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/supports-color": {
+      "version": "7.2.0",
+      "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-7.2.0.tgz",
+      "integrity": "sha512-qpCAvRl9stuOHveKsn7HncJRvv501qIacKzQlO/+Lwxc9+0q2wLyv4Dfvt80/DPn2pqOBsJdDiogXGR9+OvwRw==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "has-flag": "^4.0.0"
+      },
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/union": {
+      "version": "0.5.0",
+      "resolved": "https://registry.npmjs.org/union/-/union-0.5.0.tgz",
+      "integrity": "sha512-N6uOhuW6zO95P3Mel2I2zMsbsanvvtgn6jVqJv4vbVcz/JN0OkL9suomjQGmWtxJQXOCqUJvquc1sMeNz/IwlA==",
+      "dev": true,
+      "dependencies": {
+        "qs": "^6.4.0"
+      },
+      "engines": {
+        "node": ">= 0.8.0"
+      }
+    },
+    "node_modules/url-join": {
+      "version": "4.0.1",
+      "resolved": "https://registry.npmjs.org/url-join/-/url-join-4.0.1.tgz",
+      "integrity": "sha512-jk1+QP6ZJqyOiuEI9AEWQfju/nB2Pw466kbA0LEZljHwKeMgd9WrAEgEGxjPDD2+TNbbb37rTyhEfrCXfuKXnA==",
+      "dev": true,
+      "license": "MIT"
+    },
+    "node_modules/whatwg-encoding": {
+      "version": "2.0.0",
+      "resolved": "https://registry.npmjs.org/whatwg-encoding/-/whatwg-encoding-2.0.0.tgz",
+      "integrity": "sha512-p41ogyeMUrw3jWclHWTQg1k05DSVXPLcVxRTYsXUk+ZooOCZLcoYgPZ/HL/D/N+uQPOtcp1me1WhBEaX02mhWg==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "iconv-lite": "0.6.3"
+      },
+      "engines": {
+        "node": ">=12"
+      }
+    }
+  }
+}
diff --git a/package.json b/package.json
new file mode 100644
index 0000000..515ef29
--- /dev/null
+++ b/package.json
@@ -0,0 +1,12 @@
+{
+  "name": "projx-horror-web",
+  "version": "0.1.0",
+  "private": true,
+  "type": "module",
+  "scripts": {
+    "dev": "npx http-server . -p 4173 -c-1"
+  },
+  "devDependencies": {
+    "http-server": "^14.1.1"
+  }
+}
diff --git a/styles.css b/styles.css
new file mode 100644
index 0000000..d821f47
--- /dev/null
+++ b/styles.css
@@ -0,0 +1,75 @@
+html,
+body {
+  margin: 0;
+  padding: 0;
+  width: 100%;
+  height: 100%;
+  overflow: hidden;
+  background: #030303;
+  font-family: 'Inter', system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif;
+  color: #f5f5f5;
+}
+
+#scene {
+  display: block;
+  width: 100vw;
+  height: 100vh;
+}
+
+#overlay {
+  position: fixed;
+  top: 0;
+  left: 0;
+  width: 100%;
+  padding: 1.5rem 2rem;
+  pointer-events: none;
+  display: flex;
+  flex-direction: column;
+  gap: 0.75rem;
+  background: linear-gradient(180deg, rgba(0, 0, 0, 0.65) 0%, rgba(0, 0, 0, 0) 60%);
+  box-sizing: border-box;
+}
+
+h1 {
+  font-size: clamp(2.5rem, 3vw, 4rem);
+  margin: 0;
+  letter-spacing: 0.15em;
+  text-transform: uppercase;
+  color: #ff3b3b;
+  text-shadow: 0 0 25px rgba(255, 0, 0, 0.8);
+}
+
+.instructions {
+  margin: 0;
+  max-width: 460px;
+  line-height: 1.6;
+  font-size: clamp(0.9rem, 1.2vw, 1.1rem);
+}
+
+.status {
+  display: inline-flex;
+  align-items: center;
+  gap: 0.75rem;
+  padding: 0.5rem 1rem;
+  background: rgba(15, 15, 15, 0.8);
+  border-left: 3px solid #ff3b3b;
+  width: fit-content;
+  font-size: clamp(0.85rem, 1vw, 1rem);
+  text-transform: uppercase;
+  letter-spacing: 0.2em;
+  box-shadow: 0 0 20px rgba(255, 0, 0, 0.4);
+}
+
+#interaction {
+  color: #f0f0f0;
+}
+
+@media (max-width: 600px) {
+  #overlay {
+    padding: 1rem;
+  }
+
+  .instructions {
+    max-width: 100%;
+  }
+}
